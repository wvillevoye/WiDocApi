@typeparam T
@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject StartEndpoint StartEndpoint
@inject LoadEndpoints loadEndpoints
@inject HttpMethodClassMapper HttpMethodClassMapper
@inject IJSRuntime jsRuntime
@inject SessionStorageService sessionService
@inject ApiStateService ApiState
@inject ExtractParameters ExtractParameters



        <ApiKeyModal @ref="apiKeyModal" />
       
      
        
        @if (!string.IsNullOrEmpty(readErrorJson))
        {
             <div class="row">
                <div class="col-md-12">
                    <div class="alert alert-danger" role="alert">
                        <strong>Error:</strong> @readErrorJson
                    </div>
                </div>
             </div>
        }




        <div class="row mb-3">
            @if (IsValidApiKeyConfigured())
            {
                <div class="col-md-12 text-end">
                    @if (checkApiKey)
                    {
                        <button class="btn btn-secondary" @onclick="() => apiKeyModal.Show()">Authorize  <i class="bi bi-lock"></i></button>
                    }
                    else
                    {
                        <button class="btn btn-secondary" @onclick="() => apiKeyModal.Show()">Authorize <i class="bi bi-unlock"></i></button>
                    }
                </div>
            }
            <div class="col-md-12">
                <h3 class="mb-4">API Documentation</h3>
                <p>This documentation provides information about the available API endpoints. You can try them out directly from this page.</p>
                    @foreach (var group in groupedEndpoints)
                    {
                        <WiDocApi_Blazor.Components.ApiEndpointAccordion T="T"
                                              Endpoints="group.Endpoints"
                                              groupName="@group.GroupName"
                                              checkApiKey="checkApiKey"
                                              isLoading="isLoading"
                                              StartApi="StartApi"
                                              IsValidApiKeyConfigured="IsValidApiKeyConfigured" />
                    }

                
            </div>
        </div>
            <div class="row mb-3">
                <div class="col-md-12">
                      <WiDocApi_Blazor.Components.ModelAccordion T="T" classModels="classModels" />
              </div>
        </div>

@code {

    [Parameter]
    public List<T>? classModels { get; set; } = new();
    [Parameter]
    public string jsonFilePath { get; set; } = "ApiEndpoints.json";
    private List<GroupedApiEndpoints> groupedEndpoints = new List<GroupedApiEndpoints>();
    private bool isValid { get; set; }
    private ApiKeyModal? apiKeyModal;
    private string baseUrl => string.IsNullOrEmpty(Configuration["ApiSettings:BaseUrl"])  ? Navigation.BaseUri.TrimEnd('/') : Configuration["ApiSettings:BaseUrl"]!.TrimEnd('/');
    private string readErrorJson = string.Empty;
    private bool checkApiKey = false;
    private List<ApiEndpoint> Endpoints { get; set; } = new();
    private bool isLoading = false;
  

    private bool IsValidApiKeyConfigured()
    {
        var apiKey = Configuration["ApiSettings:ValidApiKey"];
        return !string.IsNullOrEmpty(apiKey);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender )
        {

            ApiState.ApiKeyExists = await apicheck();
            checkApiKey = ApiState.ApiKeyExists;
            StateHasChanged();

        }
    }

    protected override async Task OnInitializedAsync()
    {

        checkApiKey = ApiState.ApiKeyExists;

        var endpointInfos = RouteHandlerBuilderExtensions.WiDocApiStorage.WiDocApiList;
        if (RouteHandlerBuilderExtensions.WiDocApiStorage.WiDocApiList.Count >= 1)
        {
            Endpoints = endpointInfos.ToList();
        }
        else
        {
            var resultend = await loadEndpoints.LoadEndpointsFromJsonFile(baseUrl, jsonFilePath).ConfigureAwait(false);
            Endpoints = resultend.endpoints;
            readErrorJson = resultend.messages;
        }


        groupedEndpoints = Endpoints.GroupBy(e => e.Group).Select(g => new GroupedApiEndpoints
                                               {
                                                   GroupName = g.Key,
                                                   Endpoints = g.ToList()
                                               }).ToList();

        foreach (var endpoint in Endpoints)
        {
           
                ExtractParameters.InitializeDynamicInputValues(endpoint);
            
        }

    }

    private  async Task<bool>  apicheck() {
    
        return  await sessionService.ApiKeyExists();
    }

    private async Task StartApi(ApiEndpoint endpoint)
    {
        isLoading= true;
        if (IsValidApiKeyConfigured())
        {
            var exist = await sessionService.ApiKeyExists();

            if (!exist)
            {
                endpoint.ApiResponse = "Sorry for using this API, you need a key!";
                isLoading = false;
                return;
            }
        
        
        
        }
      
        if (endpoint.RequiresInput)
        {
            // Controleer of alle vereiste inputwaarden zijn ingevuld
            foreach (var param in ExtractParameters.FromPath(endpoint.Path!))
            {
                if (string.IsNullOrEmpty(endpoint.DynamicInputValues[param]))
                {
                    endpoint.ApiResponse = $"Input required for '{param}' but not provided.";
                    isLoading = false;
                    return;
                }
            }
        }

        await StartEndpoint.TryEndpoint(endpoint, baseUrl).ConfigureAwait(false);
        endpoint.Curl = ExtractParameters.CreateCurl(endpoint, IsValidApiKeyConfigured(), Configuration["ApiSettings:ValidApiKey"]!.ToString());
       
        isLoading = false;
        
    }
    
  

    

}

