@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@typeparam T
@inject WiDocApiScript JsInterop
<div class="pt-1">
    <h4>Models</h4>
</div>

<div class="accordion" id="accordionModels">
    @foreach (var (model, index) in classModels!.Select((m, i) => (m, i + 1000)))
    {
        <div class="accordion-item accordion-item-spacing" style="background-color:#ECF3Fa">
            <h2 class="accordion-header accordion-moduleinfo" id="heading-@index">
                <button class="accordion-button collapsed" style="background-color:#e76739;color:white" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@index" aria-expanded="false" aria-controls="collapse-@index" @onclick="() => OnAccordionClick(model)">
                    <span style="font-weight:600"><i class="bi bi-database-fill px-1"></i> @model!.GetType().Name</span>
                </button>
            </h2>

            <div id="collapse-@index" class="accordion-collapse collapse" aria-labelledby="heading-@index" data-bs-parent="#accordionModels">
                <div class="accordion-body">
                    <div class="accordion" id="TestAcc">
                        <div class=" pt-1">
                            <button class="btn btn-primary btn-sm my-3" @onclick="() => ToggleJsonVisibility(model)">
                                @if (showJson)
                                {
                                    <i class="bi bi-eye-slash"></i>
                                }
                                else
                                {
                                    <i class="bi bi-eye"></i>
                                }
                                Class to json create a payload
                            </button>

                            @if (showJson && !string.IsNullOrEmpty(sampleJson))
                            {
                                <div class="mt-2">
                                    <pre>@sampleJson</pre>
                                    <button class="btn btn-primary btn-sm mb-3"
                                            @onclick="() => CopyToClipboardAsync(sampleJson)" title="Copy to clipboard">
                                        <i class="bi bi-clipboard-data-fill"></i>
                                    </button>
                                    @if (showCopiedMessage)
                                    {
                                        <span class="copied-message" style="color: black; font-size:15px; font-weight:600; padding-left:10px">
                                            Copied
                                        </span>
                                    }
                                </div>
                            }
                        </div>

                        @foreach (var description in GetPropertyDescriptions(model))
                        {
                            var collapseId = $"collapse_{description.Name}";
                            var headingId = $"heading_{description.Name}";

                            <div class="accordion-item">
                                <h2 class="accordion-header" id="@headingId">
                                    <button class="accordion-button" type="button" style="background-color:#f5f5f5;color:#001C3D" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="true" aria-controls="@collapseId">
                                        <i class="bi bi-filetype-key  px-1"></i><b>@description.Name</b>
                                    </button>
                                </h2>

                                <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                                    <div class="accordion-body">
                                        <ul class="list-group list-group-flush">
                                            @if (!string.IsNullOrEmpty(description.Note))
                                            {
                                                <li class="list-group-item small-text">
                                                    <i class="bi bi-record px-1"></i> @description.Note
                                                </li>
                                            }
                                            else
                                            {
                                                <li class="list-group-item small-text">
                                                    <i class="bi bi-record px-1"></i> Sorry no description: [WiDocApiSchema("text")] attribute to add description.
                                                </li>
                                            }
                                            <li class="list-group-item small-text">
                                                <i class="bi bi-braces-asterisk px-1"></i> <i>@description.Prop</i>
                                            </li>
                                            @if (!string.IsNullOrEmpty(description.Attri))
                                            {
                                                <li class="list-group-item small-text">
                                                    <i class="bi bi-braces px-1"></i> @description.Attri
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<T>? classModels { get; set; } = new();
    [Parameter]
    public object? Model { get; set; }


    private bool showJson = false;
    private string? sampleJson;

    private List<Descriptions> GetPropertyDescriptions(object model)
    {
        var descriptions = new List<Descriptions>();
        var type = model.GetType();

        foreach (var property in type.GetProperties())
        {
            var attribute = property.GetCustomAttribute<WiDocApiSchemaAttribute>();
            if (attribute != null)
            {
                var prop = property.PropertyType.ToString().Split('.').Last();
                if (prop.EndsWith("]"))
                    prop = prop.TrimEnd(']');

                var extraAttributes = new List<string>();

                if (property.GetCustomAttribute<RequiredAttribute>() != null)
                {
                    extraAttributes.Add("Required");
                }

                var stringLengthAttribute = property.GetCustomAttribute<StringLengthAttribute>();
                if (stringLengthAttribute != null)
                {
                    extraAttributes.Add($"StringLength({stringLengthAttribute.MaximumLength})");
                }

                var attributesDescription = string.Join(", ", extraAttributes);

                descriptions.Add(new Descriptions()
                    {
                        Name = property.Name,
                        Prop = prop,
                        Note = attribute.Description,
                        Attri = attributesDescription
                    });
            }
        }
        Model = model;
        return descriptions;
    }
    private void ToggleJsonVisibility(object model)
    {
        // Generate JSON for the current model
        GenerateSampleJson(model);

        // Toggle the visibility state
        showJson = !showJson;

        // Update the UI
        StateHasChanged();
    }

    private void OnAccordionClick(object model)
    {
        // Generate JSON for the current model
        GenerateSampleJson(model);

        // Update the UI
        StateHasChanged();
    }

    
    private void GenerateSampleJson(object model)
    {
        sampleJson = CreateSampleJson(model);
    }

    private string CreateSampleJson(object model)
    {
        var type = model.GetType();
        var sampleObject = Activator.CreateInstance(type);

        foreach (var property in type.GetProperties())
        {
            if (property.CanWrite)
            {
                object sampleValue = GetSampleValue(property.PropertyType)!;
                property.SetValue(sampleObject, sampleValue);
            }
        }

        return JsonSerializer.Serialize(sampleObject, new JsonSerializerOptions { WriteIndented = true });
    }

    private object? GetSampleValue(Type type)
    {
        if (type == typeof(int) || type == typeof(int?))
            return 1;
        if (type == typeof(string))
            return "SampleText";
        if (type == typeof(DateTime) || type == typeof(DateTime?))
            return DateTime.Now;
        if (type == typeof(bool) || type == typeof(bool?))
            return true;
        if (type == typeof(double) || type == typeof(double?))
            return 1.23;
        if (type == typeof(float) || type == typeof(float?))
            return 1.23f;
        if (type.IsEnum)
            return Enum.GetValues(type).GetValue(0)!;

        return null;
    }


    private async Task CopyToClipboardAsync(string jsonF)
    {
        if (JsInterop != null)
        {
            // Pass formatted JSON to clipboard
            await JsInterop.CopyToClipboard(jsonF);
            ShowCopiedMessage();
        }
    }


    // Dispose the JS module when the component is disposed.
    public async ValueTask DisposeAsync()
    {
        if (JsInterop != null)
        {
            await JsInterop.DisposeAsync();
        }
    }
    private bool showCopiedMessage = false;

    private void ShowCopiedMessage()
    {
        showCopiedMessage = true;

        // Use a timer to hide the message after a few seconds
        Task.Delay(2000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                showCopiedMessage = false;
                StateHasChanged(); // Refresh the UI
            });
        });
    }



    private class Descriptions
    {
        public string? Name { get; set; }
        public string? Prop { get; set; }
        public string? Note { get; set; }
        public string? Attri { get; set; }
    }
}
