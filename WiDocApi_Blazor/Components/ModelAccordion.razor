@using System.ComponentModel.DataAnnotations
@typeparam T
<div class="pt-1">

    <h4>Models</h4>

</div>
<div class="accordion" id="accordionModels">
    @foreach (var (model, index) in classModels!.Select((m, i) => (m, i + 1000)))
    {
        <div class="accordion-item accordion-item-spacing" style="background-color:whitesmoke">
            <h2 class="accordion-header accordion-moduleinfo" id="heading-@index">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@index" aria-expanded="false" aria-controls="collapse-@index">
                    <span style="font-weight:600"> @model!.GetType().Name</span>
                </button>
            </h2>
            <div id="collapse-@index" class="accordion-collapse collapse" aria-labelledby="heading-@index" data-bs-parent="#accordionModels" >
                <div class="accordion-body">
                    <div class="accordion" id="TestAcc">
                        @foreach (var description in GetPropertyDescriptions(model))
                        {
                            var collapseId = $"collapse_{description.Name}";
                            var headingId = $"heading_{description.Name}";

                            <div class="accordion-item">
                                <h2 class="accordion-header" id="@headingId">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="true" aria-controls="@collapseId">
                                       Name :  <b>@description.Name</b>
                                    </button>
                                </h2>
                                <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                                    <div class="accordion-body">
                                        <ul class="list-group list-group-flush">
                                            <li class="list-group-item small-text">description : @description.Note</li>
                                            <li class="list-group-item small-text">property : <i>@description.Prop</i></li>
                                            <li class="list-group-item small-text"> attribute : @description.Attri</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<T>? classModels { get; set; } = new();

    private List<Descriptions> GetPropertyDescriptions(object model)
    {
        var descriptions = new List<Descriptions>();
        var type = model.GetType();

        foreach (var property in type.GetProperties())
        {
            var attribute = property.GetCustomAttribute<WiDocApiSchemaAttribute>();
            if (attribute != null)
            {
                var prop = property.PropertyType.ToString().Split('.').Last();
                if (prop.EndsWith("]"))
                    prop = prop.TrimEnd(']');

                var extraAttributes = new List<string>();

                // Check for Required attribute
                if (property.GetCustomAttribute<RequiredAttribute>() != null)
                {
                    extraAttributes.Add("Required");
                }

                // Check for StringLength attribute
                var stringLengthAttribute = property.GetCustomAttribute<StringLengthAttribute>();
                if (stringLengthAttribute != null)
                {
                    extraAttributes.Add($"StringLength({stringLengthAttribute.MaximumLength})");
                }

                // Combine attributes into one string
                var attributesDescription = string.Join(", ", extraAttributes);

                // descriptions.Add($"{property.Name} [{prop}] - ({attribute.Description}) {attributesDescription}");
                descriptions.Add(new Descriptions()
                {
                        Name = property.Name,
                        Prop = prop,
                        Note = attribute.Description,
                        Attri = attributesDescription
                });
            }
        }

        return descriptions;
    }
    private class Descriptions
    {
        public string? Name { get; set; }
        public string? Prop { get; set; }
        public string? Note { get; set; }
        public string? Attri { get; set; }

    }
}
