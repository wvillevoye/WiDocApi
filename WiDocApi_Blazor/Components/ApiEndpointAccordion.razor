@using Microsoft.AspNetCore.Components.Forms
@typeparam T
@inject HttpMethodClassMapper HttpMethodClassMapper
@inject ExtractParameters ExtractParameters
@inject WiDocApiScript JsInterop

<div class="pt-3">

<h4>@groupName</h4>

</div>


<div class="accordion accordion-flush" id="accordionExample">
    @foreach (var endpoint in Endpoints)
    {
        <div class="accordion-item accordion-item-spacing" style="background-color:whitesmoke" @key="endpoint.Id">
            <h3 class="accordion-header @HttpMethodClassMapper.GetClasses(endpoint.HttpMethod.ToString()!).headerClass" id="heading-@endpoint.Id">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@endpoint.Id" aria-expanded="false" aria-controls="collapse-@endpoint.Id">
                    <div class="row mb-0">
                        <div class="col-sm-auto">
                            <span class="@HttpMethodClassMapper.GetClasses(endpoint.HttpMethod.ToString()!).buttonClass">@endpoint.HttpMethod</span>
                        </div>
                        <div class="col-sm-auto">
                            <span class="mb-0 small-text-path">@CleanApiRoute(endpoint.Path)</span>
                        </div>
                    </div>

                    @if (IsValidApiKeyConfigured())
                    {
                        <div class="col-sm text-end">
                            <span class="pe-2">
                                @if (checkApiKey)
                                {
                                    <i class="bi bi-lock" style="width:20px"></i>
                                }
                                else
                                {
                                    <i class="bi bi-unlock" style="width:20px"></i>
                                }
                            </span>
                        </div>
                    }
                </button>
            </h3>
            <div id="collapse-@endpoint.Id" class="accordion-collapse collapse" aria-labelledby="heading-@endpoint.Id" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div>
                        <p>@endpoint.Description</p>

                        @if (endpoint.RequiresInput)
                        {
                            <dl class="row mb-2">
                                @foreach (var param in ExtractParameters.FromPath(endpoint.Path!))
                                {
                                    <dt class="col-sm-2">@param.ParameterName</dt>

                                    <dd class="col-sm-10">
                                        @switch (param.Type)
                                        {
                                            
                                            case "int":
                                                <input type="number" @bind="endpoint.DynamicInputValues[param.ParameterName]" style="width:100px" placeholder="Enter @param.ParameterName..." class="form-control" />
                                                break;
                                            case "bool":
                                                <input type="checkbox" checked="@endpoint.DynamicInputValues[param.ParameterName])"
                                                       @onchange="(e) => SetDynamicInputValue(e, param.ParameterName, endpoint)"
                                                       class="form-check-input" />
                                                 break;
                                            case "datetime":
                                                <input type="datetime-local" step="1"
                                                        value=""
                                                       @onchange="(e) => SetDateTimeValue(DateTime.Parse(e.Value!.ToString()!), param.ParameterName, endpoint)"
                                                       class="form-control w-100" style="max-width: 300px;" />
                                                
                                                break;
                                            case "select":

                                                <select @bind="endpoint.DynamicInputValues[param.ParameterName]" class="form-select w-100" style="max-width: 300px;">
                                                    <option value="" disabled selected>--select--</option>
                                                    @foreach (var enumValue in endpoint.SelectLists[param.ParameterName])
                                                    {
                                                        <option value="@enumValue.Value">@enumValue.Key</option>
                                                    }
                                                </select>

                                                break;

                                               
                                            default:
                                               


                                                    <input type="text" @bind="endpoint.DynamicInputValues[param.ParameterName]" placeholder="Enter @param.ParameterName..." class="form-control" />
                                              
                                                break;
                                        }
                                    </dd>
                                }
                            </dl>
                        }

                        @if (endpoint.HttpMethod.ToString() == "POST" || endpoint.HttpMethod.ToString() == "PUT" || endpoint.HttpMethod.ToString() == "PATCH")
                        {
                            <textarea @bind="endpoint.Payload" placeholder="Enter JSON payload..." class="form-control auto-resize mb-2"></textarea>
                        }

                        <button type="button" class="btn btn-sm mb-2 @HttpMethodClassMapper.GetClasses(endpoint.HttpMethod.ToString()!).buttonClass" @onclick="() => StartApi(endpoint)">
                            <i class="fas fa-play-circle"></i> Try It Out
                        </button>

                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border text-secondary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(endpoint.ApiResponse))
                        {
                            <div class="mt-4">
                                <h6>Curl</h6>
                                <pre class="p-3 mb-2 bg-dark text-info rounded">@endpoint.Curl</pre>
                            </div>

                            <div class="scroll position-relative">
                                <h6>API Response</h6>
                                <button class="btn btn-link p-0 position-absolute" style="top: 25px; right: 0; z-index: 1; padding-right: 10px; color: white;"
                                        @onclick="() => DownloadJsonFileAsync(endpoint.ApiResponse)" title="Copy to clipboard">
                                    <i class="bi bi-box-arrow-down" style="font-size: 25px;"></i>
                                </button>
                                <pre id="apiResponseText" class="p-3 mb-2 bg-dark text-white rounded">@endpoint.ApiResponse</pre>
                            </div>
                        }
                        else if (endpoint.HasError)
                        {
                            <p class="text-danger">Failed to fetch data. Please try again.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<ApiEndpoint> Endpoints { get; set; } = new();

    [Parameter]
    public bool checkApiKey { get; set; }

    [Parameter]
    public string groupName { get; set; } = string.Empty;

    [Parameter]
    public bool isLoading { get; set; }

    [Parameter]
    public Func<ApiEndpoint, Task> StartApi { get; set; } = default!;

    [Parameter]
    public Func<bool> IsValidApiKeyConfigured { get; set; } = default!;
 
    private void SetDynamicInputValue(ChangeEventArgs e, string parameterName, ApiEndpoint endpoint)
    {
        // Convert the checkbox value to a boolean and update the dictionary
        if (endpoint.DynamicInputValues.ContainsKey(parameterName))
        {
            var check = (bool)e.Value!;
            endpoint.DynamicInputValues[parameterName] = check.ToString();
        }
    }

    private void SetDateTimeValue(DateTime? date, string parameterName, ApiEndpoint endpoint)
    {
       
            endpoint.DynamicInputValues[parameterName] = date!.Value.ToString("yyyy-MM-dd HH:mm:ss");
      
        
    }

    private async Task DownloadJsonFileAsync(string apiResponse)
    {
        if (JsInterop != null)
        {
            await JsInterop.DownloadJsonFile(apiResponse);
        }
    }


   // Dispose the JS module when the component is disposed.
    public async ValueTask DisposeAsync()
    {
        if (JsInterop != null)
        {
            await JsInterop.DisposeAsync();
        }
    }
    private static string CleanApiRoute(string route)
    {
       // Use a regular expression to remove everything between { and } including :
       return System.Text.RegularExpressions.Regex.Replace(route, @"\{([^:]+):[^}]+\}", "$1").Replace("{", "").Replace("}", "");
    }

}

