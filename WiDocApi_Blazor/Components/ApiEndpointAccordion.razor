@typeparam T
@inject HttpMethodClassMapper HttpMethodClassMapper

<div class="pt-3">

<h4>@groupName</h4>

</div>


<div class="accordion accordion-flush" id="accordionExample">
    @foreach (var endpoint in Endpoints)
    {
        <div class="accordion-item accordion-item-spacing" style="background-color:whitesmoke" @key="endpoint.Id">
            <h3 class="accordion-header @HttpMethodClassMapper.GetClasses(endpoint.Method.ToString()!).headerClass" id="heading-@endpoint.Id">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@endpoint.Id" aria-expanded="false" aria-controls="collapse-@endpoint.Id">
                    <div class="row mb-0">
                        <div class="col-sm-auto">
                            <span class="@HttpMethodClassMapper.GetClasses(endpoint.Method.ToString()!).buttonClass">@endpoint.Method</span>
                        </div>
                        <div class="col-sm-auto">
                            <span class="mb-0 small-text-path">@endpoint.Path</span>
                        </div>
                    </div>

                    @if (IsValidApiKeyConfigured())
                    {
                        <div class="col-sm text-end">
                            <span class="pe-2">
                                @if (checkApiKey)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-lock" viewBox="0 0 20 20">
                                        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2m3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2M5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1" />
                                    </svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-unlock" viewBox="0 0 20 20">
                                        <path d="M11 1a2 2 0 0 0-2 2v4a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h5V3a3 3 0 0 1 6 0v4a.5.5 0 0 1-1 0V3a2 2 0 0 0-2-2M3 8a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V9a1 1 0 0 0-1-1z" />
                                    </svg>
                                }
                            </span>
                        </div>
                    }
                </button>
            </h3>
            <div id="collapse-@endpoint.Id" class="accordion-collapse collapse" aria-labelledby="heading-@endpoint.Id" data-bs-parent="#accordionExample">
                <div class="accordion-body">
                    <div>
                        <p>@endpoint.Description</p>

                        @if (endpoint.RequiresInput)
                        {
                            <dl class="row mb-2">
                                @foreach (var param in ExtractParametersFromPath(endpoint.Path!))
                                {
                                    <dt class="col-sm-2">@param</dt>
                                    <dd class="col-sm-10">
                                        <input type="text" @bind="endpoint.DynamicInputValues[param]" placeholder="Enter @param..." class="form-control" />
                                    </dd>
                                }
                            </dl>
                        }

                        @if (endpoint.Method.ToString() == "POST" || endpoint.Method.ToString() == "PUT" || endpoint.Method.ToString() == "PATCH")
                        {
                            <textarea @bind="endpoint.Payload" placeholder="Enter JSON payload..." class="form-control auto-resize mb-2"></textarea>
                        }

                        <button type="button" class="btn btn-sm mb-2 @HttpMethodClassMapper.GetClasses(endpoint.Method.ToString()!).buttonClass" @onclick="() => StartApi(endpoint)">
                            <i class="fas fa-play-circle"></i> Try It Out
                        </button>

                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border text-secondary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(endpoint.ApiResponse))
                        {
                            <div class="mt-4">
                                <h6>Curl</h6>
                                <pre class="p-3 mb-2 bg-dark text-info rounded">@endpoint.Curl</pre>
                            </div>

                            <div class="scroll">
                                <h6>API Response</h6>
                                <pre class="p-3 mb-2 bg-dark text-white rounded">@endpoint.ApiResponse</pre>
                            </div>
                        }
                        else if (endpoint.HasError)
                        {
                            <p class="text-danger">Failed to fetch data. Please try again.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public List<ApiEndpoint> Endpoints { get; set; } = new();

    [Parameter]
    public bool checkApiKey { get; set; }

    [Parameter]
    public string groupName { get; set; } = string.Empty;

    [Parameter]
    public bool isLoading { get; set; }

    [Parameter]
    public Func<ApiEndpoint, Task> StartApi { get; set; } = default!;

    [Parameter]
    public Func<bool> IsValidApiKeyConfigured { get; set; } = default!;

    private List<string> ExtractParametersFromPath(string path)
    {
        var parameters = new List<string>();
        var matches = System.Text.RegularExpressions.Regex.Matches(path, @"\{(.*?)\}");

        foreach (var match in matches)
        {
            parameters.Add(match.ToString()!.Trim('{', '}'));
        }

        return parameters;
    }
}

